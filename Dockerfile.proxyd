FROM golang:1.25.3-alpine3.22 AS builder

ARG GITCOMMIT=docker
ARG GITDATE=docker
ARG GITVERSION=docker

RUN apk add make jq git gcc musl-dev linux-headers

# Copy the proxyd source from the submodule
COPY ./external/ethereum-optimism-infra/proxyd /app

WORKDIR /app

# Set build environment variables to handle memory issues
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64
ENV GO111MODULE=on
# Increase memory limits
ENV GOGC=20
ENV GOMEMLIMIT=2GiB

# Download dependencies first
RUN go mod download

# Use a direct build approach with simplified flags
RUN go build \
    -ldflags="-s -w -X main.GitCommit=${GITCOMMIT} -X main.GitDate=${GITDATE} -X main.GitVersion=${GITVERSION}" \
    -o ./bin/proxyd ./cmd/proxyd

FROM alpine:3.22

RUN apk add bind-tools jq curl bash git redis

# Copy the entrypoint script from the submodule
COPY ./external/ethereum-optimism-infra/proxyd/entrypoint.sh /bin/entrypoint.sh

RUN apk update && \
    apk add ca-certificates && \
    chmod +x /bin/entrypoint.sh

EXPOSE 8080

VOLUME /etc/proxyd

COPY --from=builder /app/bin/proxyd /bin/proxyd

ENTRYPOINT ["/bin/entrypoint.sh"]
CMD ["/bin/proxyd", "/etc/proxyd/proxyd.toml"]
